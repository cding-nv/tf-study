
层级即复杂又简单   做事情就好
规则很不多又很少  
即快又慢
即自信又自卑
即严酷又温情脉脉

盒子设计思路 是自顶向下  最低成本的脆弱的性能巨兽  设计巧妙 严丝合缝  升级相当于整个系统重构
       盒子思维的设计逻辑是假定部件是可靠的， 不变的  静态设计
      硬件设计模式  公司的基因
软件设计思维是 自底向上

1.  公司不断 在拷问：2012  实验室 ， 各个产品线和 BU  的 软件 部门，你们到底 做出了 什么创
新性的 软件技术 ？为 公司 提供了什么样的核心竞争力。
2.  各个 软件部门，各个平台部门 越做越累， ， 但是 越做 越 丧失 方向感， ， 最后连自己都在疑惑：
自己的 工作和外包团队 有 什么区别 ？

硬件门槛高 周期长 
软件低门槛 低投入
我们 的 软件创新和竞争力定义到底是什么？ 像华为 这样步履蹒跚的 缓慢 大象 如何同 体态轻盈的蝴蝶共舞

软件本身由于快速演进的特点 没有秘密可言
软硬件一体化设计

周而复始，平台部门积累了一大堆“特性”“竞争力”，随着产品线的一代代产品迭代，平
台部门自己软件的更新换代。这些特性和竞争力对所有人都成为了巨大的负担。但是产品生
出来了还要养活呀，这样一来，从业务部门到平台部门的人力需求越来越大。最后所谓的平
台部门，实际上微观上是一个个产品线，一个个盒子的配套零件，不同的盒子，不同的产品
线之间的共性越来越少，最后都变成了一个个垂直的烟囱

 一个平台类软件要做的事情就是要在 某一个 市场空
间中 建立起 连接生产者和消费者的一座 桥梁 。 而 这一堆全无技术含量的 脚本 就
是这座无价的桥梁 。和华为“连接全世界，做数据的管道”的思路如出一辙

一旦产品在市场上形成了类似的垄断的生态，对我直观的感受就是大半年以后，除了
早上和美国的例会以外，我 10 点左右才晃晃悠悠的到公司，下午准点拿包走人（这在
WindRiver 已经算是很勤奋和敬业的了）。真正开始享受起“外企”的舒适生活了。当然，这段
时间也是我人生中最后悔的一段时光。Stay hungry, Stay foolish 绝对是说给当时我这种人听
的，但这是另外的话题了。

小时候需要针对文章总结“中心思想”这样的功课。每当我下笔写下如下的文字“作者的这篇诗歌歌颂了祖国壮丽的河
山，抒发了诗人的爱国主义情怀”，原作者其实：我没那么多想法，当时只是喝醉了，随口
吟唱出来而已。

  公司的 软件 平台部门 的 任务是什么？ 仅仅 是应该提供产品线的一些特
性支撑么？还是应该 将 眼光放在全行业的战略 卡位点 上呢？
  软件的 创新是 什么 ， 是“别人 做不出来 ” 的东西 吗 ？

1.  只聚焦 在成熟市场，已经证明 可以 赚 大 钱的行业 和 市场。
2.  占领市场 而不是培育市场。 善于 抢地盘，不善于 开拓 地盘

销售额了 达到了 1000  亿 美元 ，这是一个里程碑，总体来说，公司已经是世
界顶级的 IT 公司之一了，而且巨大的销售额使得公司的腾挪空间也变大了
拥有 设备 ：CBG 越做越强，1500 亿美元的预期意味着什么，意味着未来我们家
里，车里凡是能发光的，发亮的，能出声，能通电的都会拥有华为的 logo。这几乎
是所有互联网公司梦寐以求的接入入口。记得和一个在百度的同学聊天的时候他说
过一句话：互联网公司还是钱不够多呀，钱够多的话，所有的设备都会免费送给客
户。设备就是入口，就是未来。
  数据 通道在华为的手里 ：CT 领域就不用讲了。全世界的网络都差不多是华
为建立的
公有云 在起步 ， 发展迅速 ：虽然公司很多很多人都在唱衰自己的公有云，
但我却对华为公有云很有信心，我非常坚定的相信华为公有云能成功。我的理由倒
也很简单：
  公有云市场已经开始赚钱，而且市场规模巨大，符合我司只进入赚大钱的成熟
市场的惯例。
  不需要创新，不需要培育市场，不用动脑子，照着做就好了，符合我司抢地盘
的一贯风格。符合我们只比别人做的好一点点的风格。 华为 不怕落后 ，落后
了可以把领先者用手术刀精确的剖析到每一条经络和肌肉纤维的走向，华为喜
欢也擅长干这个， 华为怕的是 领先 ，怕的是 没有对手 ，没有参照系，
华为就茫然不知所措，不知道该干啥。
  公有云的竞争是马拉松，不是百米冲刺，是巨头间的战争，是一场比拼力量+
耐力的战争。这也是华为擅长和喜欢的套路。为什么担心什么金山云，Ucloud….
呢？即使没有华为公有云，历史也会淘汰他们。华为要做的只是准备好姿势，
等待他们消亡掉以后，和其它巨头一起瓜分地盘而已。罗马角斗场里你看到过
老鼠，猫咪吗？
  公有云本质上是一个封闭场景，一个超级“大盒子”。
有 自己的芯片和硬件能力 ，而且还很强，未来越来越强：诚然如我前面的
分析，华为本质上是一个硬件公司，做软件确实别扭，转变起来很难。可话又说回
来了，你让 做软件的 公司 做硬件，那 是 难上加难 。硬件工程司转软件，从严
谨转向浪漫还是比较容易的，但是从浪漫转向严谨甚至是“僵化”几乎是不可能的。
所以强悍如 google，微软这样的公司，难道不想做设备么，难道不知道掌握设备入
口么？难道没有做过尝试么？不是不想，实不能也，基因是从娘胎里带出来的。
  巨变 前夜 ，另外还有很重要的一点是，当 5G，AI，区块链等产业成熟以后，手
机将不再是唯一的 app 入口，甚至不再是以传统的 app 形式存在的，比如现在的
智能音箱，哪里还有 app 的踪影呢？当万物智能之后，整个互联网的生态都会发生
急剧的变化。而掌握了设备入口的华为，为何还需要放入别人的 app 呢？即使是现
在，全球存量的华为设备都已经几亿，如果我们做信息推送，起点都比今日头条高
几个段位了（目前还不具备软件开发基因，更不要说是互联网软件，这个另说）。
也就是说，世界后续的变化速度和深度可能超过每一个人的想象，因此对华为来说，
面临众多颠覆性的机遇

如果把这一切都串联起来看的话，未来华为呈现的是一个什么样的全景图呢？ 用户 的
身边围绕着华为的各种设备， 用户 的数据通过华为的网络 传输 ，传递到边缘 侧 节
点，最终汇聚到华为公有云上。 这几乎 是 一个完美 的 数据 闭环 ， 正向反馈，逐步
加强的体系 。如果能达到这一步，华为 3000 亿目标显得有点太少了。（此处应该有掌声 10
分钟）
而且从这个逻辑拼图中，看起来 CT  是 棋局的布局阶段，者 消费者 BG  是 中盘 ，但
是云 BU  才是 这盘棋 的胜负手 呀。

我们 之前这种“ 跟随” 性研发能 支撑么？ 在变化极快的端&云行业，没有工业
标准（或者说既成事实就是工业标准），行业都是以卡位的形式来进行软件开发的
时候，我们的跟随战术还奏效么？
  在这么 一个大的循环体系中，我们有握在手里的 关键软件 平台控制点么？
很难想象腾讯没有微信，google 没有 android 他们会变成什么样。难道我们在这么
大的一个循环体系中还是卖盒子么？如果华为拥有类似的平台，再加上先天的硬件
基因优势，这个控制力度还有谁能出其右呢？
  在 端和云的利润都相对是比较薄的 情况下 。 除了正面 迎击对手 这样 的消
耗性打法 ，是否存在类似 风河 这样的侧面抑制的战术呢 ？
  华为 的对手 变化 了 ，从缓慢沉重的爱立信，诺西转变成为了苹果，google，亚马
逊，facebook 等，这些公司都具有和传统 IT 企业截然不同的风格和玩法。华为如
何应对呢？
公司的 软件 平台部门 的 任务是什么？ 我们 传统作为设备 器件 连接器的
定位能和 先进 公司的整体性软件平台 PK  么 ？
  软件的 创新 是 什么， ， 在公司 的 端& 云这两侧，传统的 人无我有 ，人有我优
的 的 feature  增强 创新 模式还行么 ？

生态
所谓构建生态其实就是“ 用我的 人越多越好, 所有人 都用我是最终 目
标 ”。
有很多用户未必有很好的生态，但是没有很多客户 一定没有生态。
获取 足够 多的用户是 生态 的第一要务 。为了得到更多的用户，可以无所不用
其极。
1. 开源本身不是目标，开源只是建立生态的一种手段，是为了更多用户使用。
2. 免费本身不是目标，免费只是建立生态的一种手段，是为了更多用户使用。
3. 送钱本身不是目标，送钱只是建立生态的一种手段，是为了更多用户使用

如果真正上过战场，打过单子，见过客户的兄弟们大致应该同意我下面的说法：
“ 技术 在竞标 过程中 的占比通常是在 20% 以下， 甚至只有 10% ”。
虽然残忍了点，但世界真相确实是这样的，工程师视若生命的性能，功能在竞标中并不
占主导地位。假定真的性能，功能在评标的过程中所占分数超过 50%，这个世界上就不存在
市场，销售这样的职业了。
码农真正的坚强是认清了世界残忍的本质以后依然保持乐观的精神。如果我们只是把技
术单纯的认定为性能比拼，功能对决，自然会得到残酷的答案。但实际上， 软件 技术的内
涵 不仅仅 是性能，功能。 软硬件 认证 体系， 售前 售后服务 网络， 文档 的全面性 ，
技术的开放 性 ， 安全 合规性， 上下游 的 生态 关系， 甚至开源参与度。 。 。。等等都是
技术的一部分 。其重要程度绝大多数时候要高于性能和功能。

生态 的目标 不是让 自己 变得更强大，而是让对手变得 更弱小，钳制对手的发展和壮大 。
生态这个词，自打它被应用到 IT 行业的那天开始就不是一个防守性的词语。 生态 的
本质 是进攻
台 软件所有的威力都来自于开放 ， 在于敢于，乐于将我们做的东西让
别人用起来 。这种思维逻辑和华为传统上做盒子中藏有很多不为人知的“黑科技”完全不
同，甚至是背道而驰。这是一个痛苦的思维转换的过程，但我相信华为早晚都要，而且必
然走到这条道路上去

做生态归根结底还是在做品牌
在华为，作为硬件和业务的附属品，软件本身是没有自己的属性的，更没有品牌意识。
在公司里，一旦说到做生态，做软件平台，想到最多的词语是“开源”。其实本身开源不是一
个多么高大上，超脱世俗的意见事情。简单说只是一种“促销手段”而已。而且仅仅是手段而
已。
  架构可以变，品牌不会变。
  版本永远是品牌后面的一个数字而已。
  有了品牌才可能被认证。
  有了品牌才能认证别人。
  有了品牌才能开放。
  有了品牌才能被集成。
  有了品牌才能集成别人。

软件设计基本原则
现代软件经过长时间的发展，整体的面貌已经有了非常巨大的发展。作为一个工程师，
我自己的体会有两点：
1.  软件 的零部件极大丰富 ，现代软件早已经脱离了刀耕火种的时代，对于某个特
定零件和部件来说，你肯定在 github 上能找到相应的项目，好用不好用另说，但是
肯定有。很多时候，一个软件系统的搭建过程只是需要用胶水语言将现成的零件胶
结在一起就能上路了。一个 架构师的能力越来越多的体现在他的脑海里 储备
了多少已知的零件， 是否 能用最快的速度 ， 用现有的零件把系统构建起
来 。
2.  编程语言 发生了极大的变化 。Python, Golang， Rust 等一大波语言蓬勃而出，
这些语言的开发效率相对 C/C++快了几乎几个数量级。而且不容易出错。性能也不
见得差。只要不是需要一个 cycle 一个 cycle 扣性能的地方，我看不到任何理由再选
用 C/C++了。更重要的是，这些现代语言，在设计初期就考虑到了代码的依赖性，
甚至语言自己就内嵌测试单元测试框架，和 github 这样的开发平台无缝的对接等
等，都让 软件开发越来越从一个高 智商 的脑力活动变成了一种体力活

这里有一个很难以处理的矛盾。平台如果只强调标准化，除了能够保证业务的连续性
以外，很难给产品线带来直接的竞争力。但是如果要给某个产品带来差异化竞争力，首要的
工作肯定是要深入产品，针对产品有特殊处理，通常来说，对兼容性，标准型破坏越多，整
个产品的性能越有可能提升。但是这样一来，就又和产品形成了强绑定，不自觉中又构建起
来了一个烟囱

 平台部门的定位 到底 是系统的提供者，还是能力的提供
者 。目前的运作机制来看，整个平台部门实际上是能力提供者的角色，也就是因为我拥有这
个能力，所以，相对于产品线，是以出卖能力来支持产品线。这也是各个平台部门做着做着
就做成了外包感觉的重要原因。
虽然看起来好像无解，但我还是从我的经验提出我的看法吧：
  我个人认为 平台部门 应该 更偏向系统提供者这样的定位 ，平台应该还是以
固化能力，形成平台，帮助产品构筑外部生态，扩展行业生存空间为主。
  平台部门本身也还是能力提供者的角色，但是这种 能力提供者的 目标 应该倾
向于 将 产品线 的 差异化 竞争力 通用化 ，标准化，产品化 ， 开放化 ，做到
安装即 可用 的 状态。成为 公司 各种 技术的汇聚点和 交流 点 

对于软件来说，越来越多的模式变成了如下的三部曲：
1.  做出一个原型 。
2.  发布出去 ， 把客户 involve  进来 。
3.  依照 客户，市场进行快速迭代， 成功了就 顺势而上， 失败了 则 换一个 思
路 路 goto 1 。
因此，传统上各级软件部门的洞察规划实施这样的体制可能要转变成为更为灵活的
发布试错持续改进这样的模式上

平台部门的考核机制 逐步 变成
了 竞争力 评议机制， 而 在华为 传统 的竞争力定义下， 就 只剩下“ 性能” 这个 一 个属性了，但这
个属性又 严重 偏离了 软件平台 生态 建设这个核心属性。所以 导致 了 各级 平台部门越做越别
扭 。 越别扭就越强调竞争力 。 从而 形成了 一个 负反馈 的恶性循环

总结一下
  公司 对软件 平台 的定位 应该 转变 为 成为 行业标准 ， 打破垄断和建
立垄断 ， 为公司开疆拓土的战略定位 。
  软件 平台 建立 垄断的 方法 是 做生态 。
  软件 平台的 生态 是为了进攻而不是防守 。
  生态的 目的是把用户，上下游 等 围在 自己 的怀里。
  生态 的核心是构建品牌。
  建立 生态要找到东岸和西岸。
  建立 生态比拼的是速度
  平台 部门的定位需要 有所 变化，由单纯的能力提供者 变成 系统 提
供者+ 能力提供者 。
  软件 平台 的上下游覆盖 度和用户群规模 应该是 考核的重要内容

软件世界 中最重要的一根线
微观上，每一个软件包都有自己独立的版本和 roadmap，他们在不停的开发，不停的演
进，各自拥有自己的开发计划，有自己的社区，自己的开发团队。
宏观上，所谓的一个 OS 的版本，实际上是在这些独立的软件上画一条线，分别摘取各
个软件的某个特定版本，将这些版本连接起来就形成了一条版本线，这条线就是这个 OS 版
本的基准。

每一个 独立的软件需要有一个属于自己的 unique  的 名字，便
于持续的演进 。
  版本 号不 应 是界定 软件架构 ，接口变化的 特异性 指标 ， 版本
号 更 类似一个人的年纪 标记。三十而立 和四十 不惑，到底是
架构发生了变化，还是年龄的自然增长呢？ 三十 一定而立，
四十一定不惑么？

解耦不是 API  层面 的事情， ， 首
先是 Pacakge  层面 的 事情， ， 如果软件部件无法以独立软件包的形式进
行发布 和 演进 ，那么解耦就只是 一种 幻想。 。 只有 将 一个 庞大的系统拆
解成为一个个 可 独立 演化， ， 可独立安装 的软件产品，才能够真正做到
解耦，才能真正实现业务的快速演进，才能保证架构的灵活性 ，软件
才能做 到 大而不乱 

宏观上 ， 大规模软件 系统的开发 首先 是一个组织问题，而不是
技术问题 ， 更不是简单的 API  解耦 的问题。 大规模 软件 解耦 的核心是
功能 软件实体化，可独立演进 化 ，可安装化。
微观上 ，利用新型的语言，尽最大可能减少代码量，提高代码
复用度 ， 从 解耦到耦合 ， 实现 代码 高内聚 。
总体上 呈现的是外解耦，内耦合 ，低 外联，高内聚

至少有一点 是肯定的， 公司 传授 软件开发哲学的 大部分 人 是 不 真正 上手写
程序 的 ， 他们把事情搞复杂了 

1.  在任何 时候，从现网中随机抽取一个 软件 版本，还能不能找到 与之 对
应 全部 的源代码 。
2.  任何 时候 ，在代码仓库中的任何一个 commit， ， 是不是都有明确的 bug
ID  和 需求 ID  对应 （是修正一个特定 bug 还是完成一个 feature）
3.  开发工位 是不是

 代码和
业务必须有明确的 对应 关系 ， 他们之间具有 明确 的可 回溯 性

​而这个 Gate Keeper 的角色我认为就是整个过程中的“黑科技”和“核心竞争力”。我认为
是整个风河公司最为重要的技术岗位，对于公司产品稳定开发的作用甚至要超过 CTO，这
个 gate keeper 的工作主要包含如下内容：
1.  实际操作 git push 这种入库动作。
2.  检查入库的代码，信息的格式是否符合要求。
3.  将入库的信息和需求单，bug 单对应起来。
4.  维护 clearquest 中的需求，buglist 等和 commit 之间的对应关系。
5.  维护不同分支的对应关系。
6.  维护 git 库中的 tag 信息等。
7.  检视 patch 对分支的影响范围。
8.  产品 release 的实际操作者

软件质量应该围绕一个核心，三个基础衡量指标展开。
一个核心是： 软件 质量的核心是 可 回溯性，所有软件质量的动作都是
围绕 可回溯性 展开 ，保证可回溯性 。
三个指标是：
1.  现网 业务和源代码的 完整 回溯 性 。
2.  源码库 中的代码和需求输入的完整可回溯 性 。
3.  开发 过程中 产生 的信息的完整可回溯行。
具体实施中，应该 绕 围绕 Git  这个 全球统一的开发 协作 平台来设计开发流程 ，所
有的质量工具的开发应该最终是以 Git 为核心来进行设计。
软件开发的核心是： 如何能够 让 工程师尽可能减少非代码 开发 以外的 操作 和 时
间
工程师和开发工具的关系是： 工具 越少越好， 接触 面越 小 越好，尽最大努力杜绝
手动操作 。
逐步建立工具化的文化认知，西方成熟的 软件开发底蕴 很大 程度上体现为工具文
化 ，以及 构建在工具之上的 流程 遵从 文化 

大多数情况下，我在华为看不到这种工程师文化。我很少能在华为看到
具有激情的工程师。也许激情在无穷无尽的交付折磨，产品进度中早就给消耗干净了

 中国的工程师很差的不多， 极好 的也不多 ， 大多数工程师处于好，不错 ， 或者普通
这个区间。而 西方 工程师我的感觉是 不靠谱 的 不少 ，中间 状态 的 也不少 ，但是
顶级优秀的比我们要 多 不少

只有平和的心态才能把软件做好，火车不怕慢，怕停站，软件开发不怕慢，怕断。华为
多的是 1000 个人奋战 3 个月的淮海战役模式，却极少有抗战八年，集小胜为大胜的游击战
模式。 1000  个人做 做 3  个月 的 软件 铁定好不到哪里去，但是 3  个人干 干 3  年 的 软件 就
会 非常 可怕 。

强烈的 KPI 文化将部门和部门之间，团队和团队之间，工程师和工程师之间变成了敌对
关系。你很快会发现，工程师在团队中会很挑活，凡是不显眼的，没法绩效的工作基本上很
难推动，勉强能做下去的质量也可想而知。但是，一个体系中， 工作 的 显眼 度和 工作的
重要 程度完全没啥关系 。
这些工程师的大忌很快的污染掉一拨拨的工程师。
  技术方面还是呆呆的，但是工程师在其它方面开始变的“油”起来。
  绩效好的工程师群体口才越来越好，肢体语言越来越丰富，这和普遍认知中的顶级
工程师沉默寡言，羞涩腼腆的形象大相径庭。
  糟糕的是，毕业生们很快就会进入到某种状态中，一种再也闻不到技术味的状态中。
  开始能吵架了，嗓门越来越大，学会不讲理，或者讲歪理了。
  工程师开始“创造”，即使行业内普遍共识的 no news is the best news 的底层软件，
平台软件领域也有很多 “good news”了。
我个人的建议是对于工程团队， 特别是码农团队 ，相对弱考评似乎更有利于 码农 的成长
和工程师文化的建立。比如 B/B+这样的考评体系是否简化为 B 一档。

工程师必须懂技术，这个听起来好像挺搞笑的一种说法。但是这种说法在华为却显得并
不那么可笑。不同架构师之间的能力有差异，不同行业，领域的能力模型也会很不一样。但
是在我的认知里，架构师，甚至是所谓的总架构师，还是需要对细节有很清楚理解的。否则
很难想象怎么去设计东西。 工程师 懂技术说的是工程师，特别是架构师要对底层的
细节要有清晰的了解

软件的世界还有太多的东西每天都在变化，诚如我前面所说， 考验架构师的 越来 越
是 对外界世界的敏感程度和了解程度，而不是对自己 已有 工作的熟悉程度

 架构师需要具有写程序的能力， ， 而且这种能力越强越好 。至少，他不会被下面的工程师糊弄住

 人被骂多了就会显得比较木讷，工程师显得呆呆的。工程师没有情趣，不会讲笑话，
不会开玩笑。这种氛围本身就是对创造力的一种压制。
2. 人被骂多了就皮了，表面很顺从，实际上内心是不在乎的。凡事不是发自内心的认
同去做，这事儿做的指定不靠谱。
对于这个纯管理层面的事情，我不做过多的探讨，也说不上有什么建议。只把问题抛出来把。

 希望 公司能 保持 业务的专注和强大的学习能力。 逐步 找回 正在丧失的工程师文化和 协作 精神

